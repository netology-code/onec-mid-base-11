
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	//++++++
	//zmltdv: Добавляем в расчет скидку
        ПолнаяСкидка = ТекущиеДанные.Скидка + Объект.из_СогласованнаяСкидка;
        
        Если ПолнаяСкидка > 100 Тогда
            ПолнаяСкидка = 100;
        ИначеЕсли ПолнаяСкидка < 0 Тогда
            ПолнаяСкидка = 0;
        КонецЕсли;
        
        КоэффициентСкидки = 1 - ПолнаяСкидка / 100;
        ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество * КоэффициентСкидки;
        
        Если ПолнаяСкидка = 100 Тогда
            Сообщить("Суммарная скидка достигла 100%! Сумма строки установлена в 0.");
        КонецЕсли;
	//++++++
	
//	КоэффициентСкидки = 1 - ТекущиеДанные.Скидка / 100;
//	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество * КоэффициентСкидки;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти

#Область СогласованиеСкидки
//zmltdv: Область, содержащая процедуры для пересчёта табличных частей и обработки изменения скидки

&НаКлиенте
Процедура ПересчитатьТаблицу(Команда)
// Вызываем процедуру пересчёта таблиц, которая выполнит перерасчёт всех строк табличных частей
	ПрименитьСкидку();	
КонецПроцедуры
 
&НаКлиенте
Асинх Процедура СогласованнаяСкидкаПриИзменении(Элемент)
// Проверяем, заполнены ли табличные части "Товары" и "Услуги"
	Если Объект.Товары.Количество() = 0 И Объект.Услуги.Количество() = 0 Тогда
		Сообщить("Табличные части не заполнены! Пересчёт не требуется");
		Возврат;
	КонецЕсли;
	
// Асинхронный вопрос
    РежимДиалога = РежимДиалогаВопрос.ДаНет;
    Ответ = Ждать ВопросАсинх("Пересчитать все строки по новой скидке?", РежимДиалога, 0);

    Если Ответ = КодВозвратаДиалога.Да Тогда
        ПрименитьСкидку();
    Иначе
        Сообщить("Пересчёт скидки отменён");
    КонецЕсли;     
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьСкидку()
// Перебираем все строки табличной части "Товары" и пересчитываем сумму для каждой строки
	Для каждого СтрокаТабличнойЧасти ИЗ Объект.Товары Цикл
		РассчитатьСуммуСтроки(СтрокаТабличнойЧасти);
	КонецЦикла;
		
// Аналогично, перебираем строки табличной части "Услуги" и пересчитываем сумму каждой строки
	Для каждого СтрокаТабличнойЧасти ИЗ Объект.Услуги Цикл
		РассчитатьСуммуСтроки(СтрокаТабличнойЧасти);
	КонецЦикла;
	
// После пересчёта всех строк табличных частей, пересчитываем итоговую сумму документа
	РассчитатьСуммуДокумента();
	
КонецПроцедуры 

#КонецОбласти

